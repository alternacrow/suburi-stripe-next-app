import { useCallback, useEffect, useMemo, useState } from "react";

import type { NextPage } from "next";
import Head from "next/head";
import type Stripe from "stripe";

import { api } from "../utils/api";

const APP_USER_ID_1 = "test_1";
const APP_USER_ID_2 = "test_2";
const APP_USER_ID_3 = "test_3";
const APP_USER_ID_4 = "test_4";
const APP_USER_ID_LIST: string[] = [
  APP_USER_ID_1,
  APP_USER_ID_2,
  APP_USER_ID_3,
  APP_USER_ID_4,
];

const Home: NextPage = () => {
  const [appUserId, setAppUserId] = useState(APP_USER_ID_1);

  const customerQuery = api.stripe.customer.useQuery({
    appUserId,
  });
  const productsQuery = api.stripe.products.useQuery();
  const mutation = api.stripe.createCheckoutSession.useMutation();

  const customer = useMemo(
    () => customerQuery.data?.customer,
    [customerQuery.data?.customer]
  );
  const products = useMemo(
    () => productsQuery.data?.products ?? [],
    [productsQuery.data?.products]
  );

  const handleClick = useCallback(
    (product: Stripe.Product) => {
      const priceId = product.default_price;

      if (!appUserId || !priceId) {
        throw new Error("Requires appUserId and priceId");
      }

      mutation.mutate({
        appUserId,
        priceId: typeof priceId === "string" ? priceId : priceId.id,
      });
    },
    [appUserId, mutation]
  );

  useEffect(() => {
    if (mutation.data?.checkoutSessionUrl) {
      window.location.href = mutation.data?.checkoutSessionUrl;
    }
  }, [mutation.data?.checkoutSessionUrl]);

  return (
    <>
      <Head>
        <title>{`Suburi Stripe App | Home`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ padding: "16px 0" }}>
        <p style={{ marginLeft: 40 }}>Email</p>
        <select
          size={APP_USER_ID_LIST.length}
          value={appUserId}
          onChange={(e) => setAppUserId(e.target.value)}
          style={{ marginLeft: 40, padding: 8, fontSize: 16 }}
        >
          {APP_USER_ID_LIST.map((appUserId, i) => {
            return (
              <option key={appUserId} value={appUserId} style={{ padding: 4 }}>
                {appUserId}
              </option>
            );
          })}
        </select>

        {customer?.subscriptions?.data.length ? (
          <div style={{ marginLeft: 40 }}>
            <p style={{ color: "red" }}>Already has subscriptions</p>
          </div>
        ) : null}

        <ul style={{ listStyleType: "none" }}>
          {products.map((product) => {
            return (
              <li
                key={product.id}
                style={{
                  margin: "16px 0",
                }}
              >
                <button
                  type="button"
                  onClick={() => handleClick(product)}
                  style={{
                    border: "1px solid gray",
                    padding: "0 16px",
                    cursor: "pointer",
                  }}
                >
                  <p>ID: {product.id}</p>
                  <p>Name: {product.name}</p>
                  <p>PriceID: {product.default_price as string}</p>
                </button>
              </li>
            );
          })}
        </ul>
      </main>
    </>
  );
};

export default Home;
