import { useState, useEffect } from "react";

import type { NextPage } from "next";
import Head from "next/head";
import type Stripe from "stripe";

import { api } from "../utils/api";

const APP_USER_ID_1 = "test_1";
const APP_USER_ID_2 = "test_2";
const APP_USER_ID_3 = "test_3";
const APP_USER_ID_4 = "test_4";
const APP_USER_ID_LIST: string[] = [
  APP_USER_ID_1,
  APP_USER_ID_2,
  APP_USER_ID_3,
  APP_USER_ID_4,
];

const sleep = async (ms: number) =>
  new Promise((resolve) => setTimeout(resolve, ms));

const Home: NextPage = () => {
  const [appUserId, setAppUserId] = useState(APP_USER_ID_1);

  const customerQuery = api.stripe.customer.useQuery({
    appUserId,
  });
  const productsQuery = api.stripe.products.useQuery();
  const createCheckoutSessionMutation =
    api.stripe.createCheckoutSession.useMutation();
  const discontinueSubscriptionMutation =
    api.stripe.discontinueSubscription.useMutation();
  const continueSubscriptionMutation =
    api.stripe.continueSubscription.useMutation();
  const cancelSubscriptionMutation =
    api.stripe.cancelSubscription.useMutation();

  const relationsQuery = api.revenueCat.relations.useQuery({ appUserId });
  const relateSubscriptionMutation =
    api.revenueCat.relateSubscription.useMutation();

  const customer = customerQuery.data?.customer;
  const subscription = customer?.subscriptions?.data[0];
  const products = productsQuery.data?.products ?? [];

  const relation = relationsQuery.data?.data;

  const refetch = () => {
    void sleep(1000).then(() => {
      void customerQuery.refetch();
      void relationsQuery.refetch();
    });
  };

  const selectProduct = (product: Stripe.Product) => {
    const priceId = product.default_price;

    if (!appUserId || !priceId) {
      throw new Error("Requires appUserId and priceId");
    }

    createCheckoutSessionMutation.mutate({
      appUserId,
      priceId: typeof priceId === "string" ? priceId : priceId.id,
    });
  };
  const handleClickContinueSubscription = () => {
    continueSubscriptionMutation.mutate({ appUserId }, { onSuccess: refetch });
  };

  const handleClickDiscontinueSubscription = () => {
    discontinueSubscriptionMutation.mutate(
      { appUserId },
      { onSuccess: refetch }
    );
  };

  const handleClickCancelSubscription = () => {
    if (!appUserId) {
      return;
    }

    cancelSubscriptionMutation.mutate({ appUserId }, { onSuccess: refetch });
  };

  const handleClickRelateSubscription = () => {
    if (!appUserId || !subscription) {
      return;
    }

    relateSubscriptionMutation.mutate(
      {
        appUserId,
        subscriptionId: subscription.id,
      },
      { onSuccess: refetch }
    );
  };

  useEffect(() => {
    if (createCheckoutSessionMutation.data?.checkoutSessionUrl) {
      window.location.href =
        createCheckoutSessionMutation.data?.checkoutSessionUrl;
    }
  }, [createCheckoutSessionMutation.data?.checkoutSessionUrl]);

  console.log(relationsQuery.data?.data);

  return (
    <>
      <Head>
        <title>{`Suburi Stripe App | Home`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ padding: "16px 0" }}>
        <p style={{ marginLeft: 40 }}>Email</p>
        <select
          size={APP_USER_ID_LIST.length}
          value={appUserId}
          onChange={(e) => setAppUserId(e.target.value)}
          style={{ marginLeft: 40, padding: 8, fontSize: 16 }}
        >
          {APP_USER_ID_LIST.map((appUserId, i) => {
            return (
              <option key={appUserId} value={appUserId} style={{ padding: 4 }}>
                {appUserId}
              </option>
            );
          })}
        </select>

        {relation ? (
          <div>
            <p style={{ marginLeft: 40, whiteSpace: "pre-wrap" }}>
              {JSON.stringify(relation.subscriber.subscriptions, null, 2)}
            </p>
          </div>
        ) : null}

        {subscription ? (
          <div style={{ marginLeft: 40 }}>
            <p style={{ color: "red" }}>Already has subscriptions</p>
            <p>
              cancel_at_period_end: {String(subscription.cancel_at_period_end)}
            </p>
          </div>
        ) : null}

        <ul style={{ listStyleType: "none" }}>
          {products.map((product) => {
            return (
              <li
                key={product.id}
                style={{
                  margin: "16px 0",
                }}
              >
                <button
                  type="button"
                  onClick={() => selectProduct(product)}
                  style={{
                    border: "1px solid gray",
                    padding: "0 16px",
                    cursor: "pointer",
                  }}
                >
                  <p>ID: {product.id}</p>
                  <p>Name: {product.name}</p>
                  <p>PriceID: {product.default_price as string}</p>
                </button>
              </li>
            );
          })}
        </ul>

        {!subscription ? null : subscription.cancel_at_period_end ? (
          <button
            type="button"
            onClick={handleClickContinueSubscription}
            style={{
              marginLeft: 40,
              border: "1px solid gray",
              padding: "16px",
              cursor: "pointer",
            }}
          >
            Continue Subscription
          </button>
        ) : (
          <>
            <button
              type="button"
              onClick={handleClickDiscontinueSubscription}
              style={{
                marginLeft: 40,
                border: "1px solid gray",
                padding: "16px",
                cursor: "pointer",
              }}
            >
              Discontinue Subscription
            </button>
            <button
              type="button"
              onClick={handleClickCancelSubscription}
              style={{
                marginLeft: 40,
                border: "1px solid gray",
                padding: "16px",
                cursor: "pointer",
              }}
            >
              Cancel Subscription
            </button>
          </>
        )}

        {subscription ? (
          <button
            type="button"
            onClick={handleClickRelateSubscription}
            style={{
              marginLeft: 40,
              border: "1px solid gray",
              padding: "16px",
              cursor: "pointer",
            }}
          >
            Relate Subscription
          </button>
        ) : null}
      </main>
    </>
  );
};

export default Home;
